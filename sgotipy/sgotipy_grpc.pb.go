// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.21.12
// source: sgotipy.proto

package sgotipy

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// SgotipyClient is the client API for Sgotipy service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type SgotipyClient interface {
	StartSgotipy(ctx context.Context, in *StartSgotipyRequest, opts ...grpc.CallOption) (*StartSgotipyResponse, error)
	StopSgotipy(ctx context.Context, in *StopSgotipyRequest, opts ...grpc.CallOption) (*StopSgotipyResponse, error)
	SgotipyStatus(ctx context.Context, in *SgotipyStatusRequest, opts ...grpc.CallOption) (*SgotipyStatusResponse, error)
}

type sgotipyClient struct {
	cc grpc.ClientConnInterface
}

func NewSgotipyClient(cc grpc.ClientConnInterface) SgotipyClient {
	return &sgotipyClient{cc}
}

func (c *sgotipyClient) StartSgotipy(ctx context.Context, in *StartSgotipyRequest, opts ...grpc.CallOption) (*StartSgotipyResponse, error) {
	out := new(StartSgotipyResponse)
	err := c.cc.Invoke(ctx, "/Sgotipy/StartSgotipy", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *sgotipyClient) StopSgotipy(ctx context.Context, in *StopSgotipyRequest, opts ...grpc.CallOption) (*StopSgotipyResponse, error) {
	out := new(StopSgotipyResponse)
	err := c.cc.Invoke(ctx, "/Sgotipy/StopSgotipy", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *sgotipyClient) SgotipyStatus(ctx context.Context, in *SgotipyStatusRequest, opts ...grpc.CallOption) (*SgotipyStatusResponse, error) {
	out := new(SgotipyStatusResponse)
	err := c.cc.Invoke(ctx, "/Sgotipy/SgotipyStatus", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// SgotipyServer is the server API for Sgotipy service.
// All implementations must embed UnimplementedSgotipyServer
// for forward compatibility
type SgotipyServer interface {
	StartSgotipy(context.Context, *StartSgotipyRequest) (*StartSgotipyResponse, error)
	StopSgotipy(context.Context, *StopSgotipyRequest) (*StopSgotipyResponse, error)
	SgotipyStatus(context.Context, *SgotipyStatusRequest) (*SgotipyStatusResponse, error)
	mustEmbedUnimplementedSgotipyServer()
}

// UnimplementedSgotipyServer must be embedded to have forward compatible implementations.
type UnimplementedSgotipyServer struct {
}

func (UnimplementedSgotipyServer) StartSgotipy(context.Context, *StartSgotipyRequest) (*StartSgotipyResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method StartSgotipy not implemented")
}
func (UnimplementedSgotipyServer) StopSgotipy(context.Context, *StopSgotipyRequest) (*StopSgotipyResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method StopSgotipy not implemented")
}
func (UnimplementedSgotipyServer) SgotipyStatus(context.Context, *SgotipyStatusRequest) (*SgotipyStatusResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SgotipyStatus not implemented")
}
func (UnimplementedSgotipyServer) mustEmbedUnimplementedSgotipyServer() {}

// UnsafeSgotipyServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to SgotipyServer will
// result in compilation errors.
type UnsafeSgotipyServer interface {
	mustEmbedUnimplementedSgotipyServer()
}

func RegisterSgotipyServer(s grpc.ServiceRegistrar, srv SgotipyServer) {
	s.RegisterService(&Sgotipy_ServiceDesc, srv)
}

func _Sgotipy_StartSgotipy_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(StartSgotipyRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SgotipyServer).StartSgotipy(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/Sgotipy/StartSgotipy",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SgotipyServer).StartSgotipy(ctx, req.(*StartSgotipyRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Sgotipy_StopSgotipy_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(StopSgotipyRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SgotipyServer).StopSgotipy(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/Sgotipy/StopSgotipy",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SgotipyServer).StopSgotipy(ctx, req.(*StopSgotipyRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Sgotipy_SgotipyStatus_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SgotipyStatusRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SgotipyServer).SgotipyStatus(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/Sgotipy/SgotipyStatus",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SgotipyServer).SgotipyStatus(ctx, req.(*SgotipyStatusRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// Sgotipy_ServiceDesc is the grpc.ServiceDesc for Sgotipy service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Sgotipy_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "Sgotipy",
	HandlerType: (*SgotipyServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "StartSgotipy",
			Handler:    _Sgotipy_StartSgotipy_Handler,
		},
		{
			MethodName: "StopSgotipy",
			Handler:    _Sgotipy_StopSgotipy_Handler,
		},
		{
			MethodName: "SgotipyStatus",
			Handler:    _Sgotipy_SgotipyStatus_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "sgotipy.proto",
}
