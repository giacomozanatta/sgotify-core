// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.21.12
// source: sgotify.proto

package sgotify

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// SgotifyClient is the client API for Sgotify service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type SgotifyClient interface {
	SendSpotifyAuth(ctx context.Context, in *SpotifyAuth, opts ...grpc.CallOption) (*SpotifyAuthReply, error)
}

type sgotifyClient struct {
	cc grpc.ClientConnInterface
}

func NewSgotifyClient(cc grpc.ClientConnInterface) SgotifyClient {
	return &sgotifyClient{cc}
}

func (c *sgotifyClient) SendSpotifyAuth(ctx context.Context, in *SpotifyAuth, opts ...grpc.CallOption) (*SpotifyAuthReply, error) {
	out := new(SpotifyAuthReply)
	err := c.cc.Invoke(ctx, "/Sgotify/SendSpotifyAuth", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// SgotifyServer is the server API for Sgotify service.
// All implementations must embed UnimplementedSgotifyServer
// for forward compatibility
type SgotifyServer interface {
	SendSpotifyAuth(context.Context, *SpotifyAuth) (*SpotifyAuthReply, error)
	mustEmbedUnimplementedSgotifyServer()
}

// UnimplementedSgotifyServer must be embedded to have forward compatible implementations.
type UnimplementedSgotifyServer struct {
}

func (UnimplementedSgotifyServer) SendSpotifyAuth(context.Context, *SpotifyAuth) (*SpotifyAuthReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SendSpotifyAuth not implemented")
}
func (UnimplementedSgotifyServer) mustEmbedUnimplementedSgotifyServer() {}

// UnsafeSgotifyServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to SgotifyServer will
// result in compilation errors.
type UnsafeSgotifyServer interface {
	mustEmbedUnimplementedSgotifyServer()
}

func RegisterSgotifyServer(s grpc.ServiceRegistrar, srv SgotifyServer) {
	s.RegisterService(&Sgotify_ServiceDesc, srv)
}

func _Sgotify_SendSpotifyAuth_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SpotifyAuth)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SgotifyServer).SendSpotifyAuth(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/Sgotify/SendSpotifyAuth",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SgotifyServer).SendSpotifyAuth(ctx, req.(*SpotifyAuth))
	}
	return interceptor(ctx, in, info, handler)
}

// Sgotify_ServiceDesc is the grpc.ServiceDesc for Sgotify service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Sgotify_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "Sgotify",
	HandlerType: (*SgotifyServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "SendSpotifyAuth",
			Handler:    _Sgotify_SendSpotifyAuth_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "sgotify.proto",
}
